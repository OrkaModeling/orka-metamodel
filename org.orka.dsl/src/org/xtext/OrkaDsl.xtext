// automatically generated by Xtext
grammar org.xtext.OrkaDsl with org.eclipse.xtext.common.Terminals

import "urn:orka:metamodel" 
import "http://www.eclipse.org/emf/2003/XMLType" as type
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

OrkaModel returns OrkaModel:
	{OrkaModel}
	'OrkaModel'
	'{'
		('name' name=String0)?
		('clusters' '(' clusters+=[Cluster|STRING] ( "," clusters+=[Cluster|STRING])* ')' )?
	'}';

Cluster returns Cluster:
	Cluster_Impl | PublicCluster | OnPremises;






Node returns Node:
	Node_Impl | EdgeNode | CloudNode;














Cluster_Impl returns Cluster:
	'Cluster'
	'{'
		('net_conf' net_conf=Boolean)?
		('name' name=String0)?
		('subnetwork' subnetwork=[Subnetwork|STRING])?
		('network' network=[Network|STRING])?
		('loadbalancers' loadbalancers=[LoadBalancer|STRING])?
		('services' services=[Service|STRING])?
		('deployments' deployments=[Deployment|STRING])?
		('nodes' nodes=[Node|STRING])?
		('region' region=[Region|STRING])?
		'orkamodel' orkamodel=[OrkaModel|STRING]
	'}';

String0 returns type::String:
	'String' /* TODO: implement this rule and an appropriate IValueConverter */;

Subnetwork returns Subnetwork:
	'Subnetwork'
	'{'
		('name' name=String0)?
		('cluster' '(' cluster+=[Cluster|STRING] ( "," cluster+=[Cluster|STRING])* ')' )?
		'network' network=[Network|STRING]
		'iprange' '(' iprange+=[IPRange|STRING] ( "," iprange+=[IPRange|STRING])* ')' 
	'}';

Network returns Network:
	{Network}
	'Network'
	'{'
		('name' name=String0)?
		('subnetwork' '(' subnetwork+=[Subnetwork|STRING] ( "," subnetwork+=[Subnetwork|STRING])* ')' )?
		('securitygroups' '(' securitygroups+=[SecurityGroup|STRING] ( "," securitygroups+=[SecurityGroup|STRING])* ')' )?
		('cluster' '(' cluster+=[Cluster|STRING] ( "," cluster+=[Cluster|STRING])* ')' )?
	'}';

LoadBalancer returns LoadBalancer:
	'LoadBalancer'
	'{'
		('name' name=String0)?
		('type' type=LoadBalancerType)?
		'cluster' cluster=[Cluster|STRING]
		('services' '(' services+=[Service|STRING] ( "," services+=[Service|STRING])* ')' )?
	'}';

Service returns Service:
	'Service'
	'{'
		('name' name=String0)?
		('type' type=ServiceType)?
		('port' port=Int0)?
		('target_port' target_port=Int0)?
		('protocol' protocol=Protocol)?
		'cluster' cluster=[Cluster|STRING]
		('securityGroup' securityGroup=[SecurityGroup|STRING])?
		('application' application=[Application|STRING])?
		('loadbalancer' loadbalancer=[LoadBalancer|STRING])?
		('ingress' ingress=[Ingress|STRING])?
	'}';

Deployment returns Deployment:
	'Deployment'
	'{'
		('replicas' replicas=Int0)?
		('name' name=String0)?
		'cluster' cluster=[Cluster|STRING]
		'containers' '(' containers+=[Container|STRING] ( "," containers+=[Container|STRING])* ')' 
		('scalingpolicy' scalingpolicy=[ScalingPolicy|STRING])?
	'}';

Node_Impl returns Node:
	'Node'
	'{'
		('name' name=String0)?
		('hostname' hostname=String0)?
		('public_ip' public_ip=String0)?
		('private_ip' private_ip=String0)?
		('os' os=String0)?
		('storage' storage=Int0)?
		('processor' processor=Processor)?
		'cluster' cluster=[Cluster|STRING]
		'resources' '(' resources+=[Resources|STRING] ( "," resources+=[Resources|STRING])* ')' 
	'}';

Region returns Region:
	{Region}
	'Region'
	'{'
		('name' name=String0)?
		('zone' '(' zone+=[Zone|STRING] ( "," zone+=[Zone|STRING])* ')' )?
		('cluster' '(' cluster+=[Cluster|STRING] ( "," cluster+=[Cluster|STRING])* ')' )?
	'}';

Boolean returns type::Boolean:
	'Boolean' /* TODO: implement this rule and an appropriate IValueConverter */;

PublicCluster returns PublicCluster:
	'PublicCluster'
	'{'
		('net_conf' net_conf=Boolean)?
		('name' name=String0)?
		('num_nodes' num_nodes=Int0)?
		('config_file' config_file=String0)?
		('provider' provider=Provider)?
		('subnetwork' subnetwork=[Subnetwork|STRING])?
		('network' network=[Network|STRING])?
		('loadbalancers' loadbalancers=[LoadBalancer|STRING])?
		('services' services=[Service|STRING])?
		('deployments' deployments=[Deployment|STRING])?
		('nodes' nodes=[Node|STRING])?
		('region' region=[Region|STRING])?
		'orkamodel' orkamodel=[OrkaModel|STRING]
	'}';

OnPremises returns OnPremises:
	'OnPremises'
	'{'
		('net_conf' net_conf=Boolean)?
		('name' name=String0)?
		('hypervisor' hypervisor=Hypervisor)?
		('subnetwork' subnetwork=[Subnetwork|STRING])?
		('network' network=[Network|STRING])?
		('loadbalancers' loadbalancers=[LoadBalancer|STRING])?
		('services' services=[Service|STRING])?
		('deployments' deployments=[Deployment|STRING])?
		('nodes' nodes=[Node|STRING])?
		('region' region=[Region|STRING])?
		'orkamodel' orkamodel=[OrkaModel|STRING]
	'}';

IPRange returns IPRange:
	'IPRange'
	'{'
		('cidr_range' cidr_range=String0)?
		('type' type=IPRangeType)?
		('public' public=Boolean)?
		'subnetwork' subnetwork=[Subnetwork|STRING]
	'}';

enum IPRangeType returns IPRangeType:
				Subnetwork = 'Subnetwork' | Pod = 'Pod' | Service = 'Service';

SecurityGroup returns SecurityGroup:
	'SecurityGroup'
	'{'
		'network' network=[Network|STRING]
		'services' '(' services+=[Service|STRING] ( "," services+=[Service|STRING])* ')' 
	'}';

enum LoadBalancerType returns LoadBalancerType:
				Internal = 'Internal' | External = 'External' | Global = 'Global';

Application returns Application:
	{Application}
	'Application'
	'{'
		('imageRepository' imageRepository=String0)?
		('port' port=Int0)?
		('requiredResources' '(' requiredResources+=[Resources|STRING] ( "," requiredResources+=[Resources|STRING])* ')' )?
		('services' '(' services+=[Service|STRING] ( "," services+=[Service|STRING])* ')' )?
		('container' '(' container+=[Container|STRING] ( "," container+=[Container|STRING])* ')' )?
		('secret' secret=[Secret|STRING])?
		('configmap' configmap=[ConfigMap|STRING])?
	'}';

enum ServiceType returns ServiceType:
				LoadBalancer = 'LoadBalancer' | Ingress = 'Ingress' | Egress = 'Egress';

Int0 returns type::Int:
	'Int' /* TODO: implement this rule and an appropriate IValueConverter */;

enum Protocol returns Protocol:
				HTTP = 'HTTP' | HTTPS = 'HTTPS' | TCP = 'TCP' | UDP = 'UDP' | All = 'All';

Ingress returns Ingress:
	{Ingress}
	'Ingress'
	'{'
		('host' host=String0)?
		('path' path=String0)?
		('tlsSecret' tlsSecret=[Secret|STRING])?
		('service' '(' service+=[Service|STRING] ( "," service+=[Service|STRING])* ')' )?
	'}';

Resources returns Resources:
	'Resources'
	'{'
		('cpu' cpu=Int0)?
		('memory' memory=Int0)?
		'node' node=[Node|STRING]
		'container' container=[Container|STRING]
		'application' application=[Application|STRING]
	'}';

Container returns Container:
	'Container'
	'{'
		('resources' '(' resources+=[Resources|STRING] ( "," resources+=[Resources|STRING])* ')' )?
		('volumes' '(' volumes+=[Volume|STRING] ( "," volumes+=[Volume|STRING])* ')' )?
		'deployment' deployment=[Deployment|STRING]
		'application' application=[Application|STRING]
	'}';

Secret returns Secret:
	{Secret}
	'Secret'
	'{'
		('encryptedData' encryptedData=String0)?
	'}';

ConfigMap returns ConfigMap:
	{ConfigMap}
	'ConfigMap'
	'{'
		('data' data=EJavaObject)?
	'}';

Volume returns Volume:
	{Volume}
	'Volume'
	'{'
		('name' name=String0)?
		('mountPath' mountPath=String0)?
		('subPath' subPath=String0)?
		('container' '(' container+=[Container|STRING] ( "," container+=[Container|STRING])* ')' )?
		('persistentvolume' persistentvolume=[PersistentVolume|STRING])?
	'}';

PersistentVolume returns PersistentVolume:
	{PersistentVolume}
	'PersistentVolume'
	'{'
		('capacity' capacity=String0)?
		('storageClass' storageClass=String0)?
		('accessMode' accessMode=AccessMode)?
		('volume' volume=[Volume|STRING])?
	'}';

enum AccessMode returns AccessMode:
				ReadWriteOnce = 'ReadWriteOnce' | ReadOnlyMany = 'ReadOnlyMany' | ReadWriteMany = 'ReadWriteMany';

EJavaObject returns ecore::EJavaObject:
	'EJavaObject' /* TODO: implement this rule and an appropriate IValueConverter */;

ScalingPolicy returns ScalingPolicy:
	{ScalingPolicy}
	'ScalingPolicy'
	'{'
		('minReplicas' minReplicas=Int0)?
		('maxReplicas' maxReplicas=Int0)?
		('cpuThreshold' cpuThreshold=Int0)?
		('memoryThreshold' memoryThreshold=Int0)?
		('deployment' deployment=[Deployment|STRING])?
	'}';

enum Processor returns Processor:
				x64 = 'x64' | x86 = 'x86' | ARM = 'ARM';

EdgeNode returns EdgeNode:
	'EdgeNode'
	'{'
		('name' name=String0)?
		('hostname' hostname=String0)?
		('public_ip' public_ip=String0)?
		('private_ip' private_ip=String0)?
		('os' os=String0)?
		('storage' storage=Int0)?
		('processor' processor=Processor)?
		'cluster' cluster=[Cluster|STRING]
		'resources' '(' resources+=[Resources|STRING] ( "," resources+=[Resources|STRING])* ')' 
	'}';

CloudNode returns CloudNode:
	'CloudNode'
	'{'
		('name' name=String0)?
		('hostname' hostname=String0)?
		('public_ip' public_ip=String0)?
		('private_ip' private_ip=String0)?
		('os' os=String0)?
		('storage' storage=Int0)?
		('processor' processor=Processor)?
		'cluster' cluster=[Cluster|STRING]
		'resources' '(' resources+=[Resources|STRING] ( "," resources+=[Resources|STRING])* ')' 
	'}';

Zone returns Zone:
	'Zone'
	'{'
		('name' name=String0)?
		'region' region=[Region|STRING]
	'}';

enum Provider returns Provider:
				Google = 'Google' | AWS = 'AWS' | Azure = 'Azure' | Other = 'Other';

enum Hypervisor returns Hypervisor:
				VMWare = 'VMWare' | XenServer = 'XenServer' | RHEV = 'RHEV' | KVM = 'KVM';
