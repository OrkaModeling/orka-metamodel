/**
 */
package org.orka.orkametamodel.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import org.orka.orkametamodel.util.MetamodelAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class MetamodelItemProviderAdapterFactory extends MetamodelAdapterFactory
		implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public MetamodelItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.orka.orkametamodel.PublicCluster} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PublicClusterItemProvider publicClusterItemProvider;

	/**
	 * This creates an adapter for a {@link org.orka.orkametamodel.PublicCluster}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPublicClusterAdapter() {
		if (publicClusterItemProvider == null) {
			publicClusterItemProvider = new PublicClusterItemProvider(this);
		}

		return publicClusterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.orka.orkametamodel.OnPremises} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OnPremisesItemProvider onPremisesItemProvider;

	/**
	 * This creates an adapter for a {@link org.orka.orkametamodel.OnPremises}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOnPremisesAdapter() {
		if (onPremisesItemProvider == null) {
			onPremisesItemProvider = new OnPremisesItemProvider(this);
		}

		return onPremisesItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.orka.orkametamodel.Node} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NodeItemProvider nodeItemProvider;

	/**
	 * This creates an adapter for a {@link org.orka.orkametamodel.Node}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNodeAdapter() {
		if (nodeItemProvider == null) {
			nodeItemProvider = new NodeItemProvider(this);
		}

		return nodeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.orka.orkametamodel.EdgeNode} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EdgeNodeItemProvider edgeNodeItemProvider;

	/**
	 * This creates an adapter for a {@link org.orka.orkametamodel.EdgeNode}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEdgeNodeAdapter() {
		if (edgeNodeItemProvider == null) {
			edgeNodeItemProvider = new EdgeNodeItemProvider(this);
		}

		return edgeNodeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.orka.orkametamodel.CloudNode} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CloudNodeItemProvider cloudNodeItemProvider;

	/**
	 * This creates an adapter for a {@link org.orka.orkametamodel.CloudNode}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCloudNodeAdapter() {
		if (cloudNodeItemProvider == null) {
			cloudNodeItemProvider = new CloudNodeItemProvider(this);
		}

		return cloudNodeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.orka.orkametamodel.Zone} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ZoneItemProvider zoneItemProvider;

	/**
	 * This creates an adapter for a {@link org.orka.orkametamodel.Zone}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createZoneAdapter() {
		if (zoneItemProvider == null) {
			zoneItemProvider = new ZoneItemProvider(this);
		}

		return zoneItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.orka.orkametamodel.Region} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RegionItemProvider regionItemProvider;

	/**
	 * This creates an adapter for a {@link org.orka.orkametamodel.Region}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRegionAdapter() {
		if (regionItemProvider == null) {
			regionItemProvider = new RegionItemProvider(this);
		}

		return regionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.orka.orkametamodel.IPRange} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IPRangeItemProvider ipRangeItemProvider;

	/**
	 * This creates an adapter for a {@link org.orka.orkametamodel.IPRange}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIPRangeAdapter() {
		if (ipRangeItemProvider == null) {
			ipRangeItemProvider = new IPRangeItemProvider(this);
		}

		return ipRangeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.orka.orkametamodel.Subnetwork} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SubnetworkItemProvider subnetworkItemProvider;

	/**
	 * This creates an adapter for a {@link org.orka.orkametamodel.Subnetwork}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSubnetworkAdapter() {
		if (subnetworkItemProvider == null) {
			subnetworkItemProvider = new SubnetworkItemProvider(this);
		}

		return subnetworkItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.orka.orkametamodel.Network} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NetworkItemProvider networkItemProvider;

	/**
	 * This creates an adapter for a {@link org.orka.orkametamodel.Network}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNetworkAdapter() {
		if (networkItemProvider == null) {
			networkItemProvider = new NetworkItemProvider(this);
		}

		return networkItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.orka.orkametamodel.Service} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ServiceItemProvider serviceItemProvider;

	/**
	 * This creates an adapter for a {@link org.orka.orkametamodel.Service}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createServiceAdapter() {
		if (serviceItemProvider == null) {
			serviceItemProvider = new ServiceItemProvider(this);
		}

		return serviceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.orka.orkametamodel.SecurityGroup} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SecurityGroupItemProvider securityGroupItemProvider;

	/**
	 * This creates an adapter for a {@link org.orka.orkametamodel.SecurityGroup}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSecurityGroupAdapter() {
		if (securityGroupItemProvider == null) {
			securityGroupItemProvider = new SecurityGroupItemProvider(this);
		}

		return securityGroupItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.orka.orkametamodel.Application} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ApplicationItemProvider applicationItemProvider;

	/**
	 * This creates an adapter for a {@link org.orka.orkametamodel.Application}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createApplicationAdapter() {
		if (applicationItemProvider == null) {
			applicationItemProvider = new ApplicationItemProvider(this);
		}

		return applicationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.orka.orkametamodel.Resources} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ResourcesItemProvider resourcesItemProvider;

	/**
	 * This creates an adapter for a {@link org.orka.orkametamodel.Resources}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createResourcesAdapter() {
		if (resourcesItemProvider == null) {
			resourcesItemProvider = new ResourcesItemProvider(this);
		}

		return resourcesItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.orka.orkametamodel.Deployment} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DeploymentItemProvider deploymentItemProvider;

	/**
	 * This creates an adapter for a {@link org.orka.orkametamodel.Deployment}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDeploymentAdapter() {
		if (deploymentItemProvider == null) {
			deploymentItemProvider = new DeploymentItemProvider(this);
		}

		return deploymentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.orka.orkametamodel.Container} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ContainerItemProvider containerItemProvider;

	/**
	 * This creates an adapter for a {@link org.orka.orkametamodel.Container}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createContainerAdapter() {
		if (containerItemProvider == null) {
			containerItemProvider = new ContainerItemProvider(this);
		}

		return containerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.orka.orkametamodel.Volume} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VolumeItemProvider volumeItemProvider;

	/**
	 * This creates an adapter for a {@link org.orka.orkametamodel.Volume}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVolumeAdapter() {
		if (volumeItemProvider == null) {
			volumeItemProvider = new VolumeItemProvider(this);
		}

		return volumeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.orka.orkametamodel.ScalingPolicy} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ScalingPolicyItemProvider scalingPolicyItemProvider;

	/**
	 * This creates an adapter for a {@link org.orka.orkametamodel.ScalingPolicy}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createScalingPolicyAdapter() {
		if (scalingPolicyItemProvider == null) {
			scalingPolicyItemProvider = new ScalingPolicyItemProvider(this);
		}

		return scalingPolicyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.orka.orkametamodel.ConfigMap} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConfigMapItemProvider configMapItemProvider;

	/**
	 * This creates an adapter for a {@link org.orka.orkametamodel.ConfigMap}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConfigMapAdapter() {
		if (configMapItemProvider == null) {
			configMapItemProvider = new ConfigMapItemProvider(this);
		}

		return configMapItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.orka.orkametamodel.Secret} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SecretItemProvider secretItemProvider;

	/**
	 * This creates an adapter for a {@link org.orka.orkametamodel.Secret}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSecretAdapter() {
		if (secretItemProvider == null) {
			secretItemProvider = new SecretItemProvider(this);
		}

		return secretItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.orka.orkametamodel.PersistentVolume} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PersistentVolumeItemProvider persistentVolumeItemProvider;

	/**
	 * This creates an adapter for a {@link org.orka.orkametamodel.PersistentVolume}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPersistentVolumeAdapter() {
		if (persistentVolumeItemProvider == null) {
			persistentVolumeItemProvider = new PersistentVolumeItemProvider(this);
		}

		return persistentVolumeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.orka.orkametamodel.LoadBalancer} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LoadBalancerItemProvider loadBalancerItemProvider;

	/**
	 * This creates an adapter for a {@link org.orka.orkametamodel.LoadBalancer}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLoadBalancerAdapter() {
		if (loadBalancerItemProvider == null) {
			loadBalancerItemProvider = new LoadBalancerItemProvider(this);
		}

		return loadBalancerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.orka.orkametamodel.CloudProperties} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CloudPropertiesItemProvider cloudPropertiesItemProvider;

	/**
	 * This creates an adapter for a {@link org.orka.orkametamodel.CloudProperties}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCloudPropertiesAdapter() {
		if (cloudPropertiesItemProvider == null) {
			cloudPropertiesItemProvider = new CloudPropertiesItemProvider(this);
		}

		return cloudPropertiesItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.orka.orkametamodel.Ingress} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IngressItemProvider ingressItemProvider;

	/**
	 * This creates an adapter for a {@link org.orka.orkametamodel.Ingress}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIngressAdapter() {
		if (ingressItemProvider == null) {
			ingressItemProvider = new IngressItemProvider(this);
		}

		return ingressItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.orka.orkametamodel.Monitoring} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MonitoringItemProvider monitoringItemProvider;

	/**
	 * This creates an adapter for a {@link org.orka.orkametamodel.Monitoring}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMonitoringAdapter() {
		if (monitoringItemProvider == null) {
			monitoringItemProvider = new MonitoringItemProvider(this);
		}

		return monitoringItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.orka.orkametamodel.Cluster} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ClusterItemProvider clusterItemProvider;

	/**
	 * This creates an adapter for a {@link org.orka.orkametamodel.Cluster}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createClusterAdapter() {
		if (clusterItemProvider == null) {
			clusterItemProvider = new ClusterItemProvider(this);
		}

		return clusterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.orka.orkametamodel.OrkaModel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OrkaModelItemProvider orkaModelItemProvider;

	/**
	 * This creates an adapter for a {@link org.orka.orkametamodel.OrkaModel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOrkaModelAdapter() {
		if (orkaModelItemProvider == null) {
			orkaModelItemProvider = new OrkaModelItemProvider(this);
		}

		return orkaModelItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>) type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (publicClusterItemProvider != null)
			publicClusterItemProvider.dispose();
		if (onPremisesItemProvider != null)
			onPremisesItemProvider.dispose();
		if (nodeItemProvider != null)
			nodeItemProvider.dispose();
		if (edgeNodeItemProvider != null)
			edgeNodeItemProvider.dispose();
		if (cloudNodeItemProvider != null)
			cloudNodeItemProvider.dispose();
		if (zoneItemProvider != null)
			zoneItemProvider.dispose();
		if (regionItemProvider != null)
			regionItemProvider.dispose();
		if (ipRangeItemProvider != null)
			ipRangeItemProvider.dispose();
		if (subnetworkItemProvider != null)
			subnetworkItemProvider.dispose();
		if (networkItemProvider != null)
			networkItemProvider.dispose();
		if (serviceItemProvider != null)
			serviceItemProvider.dispose();
		if (securityGroupItemProvider != null)
			securityGroupItemProvider.dispose();
		if (applicationItemProvider != null)
			applicationItemProvider.dispose();
		if (resourcesItemProvider != null)
			resourcesItemProvider.dispose();
		if (deploymentItemProvider != null)
			deploymentItemProvider.dispose();
		if (containerItemProvider != null)
			containerItemProvider.dispose();
		if (volumeItemProvider != null)
			volumeItemProvider.dispose();
		if (scalingPolicyItemProvider != null)
			scalingPolicyItemProvider.dispose();
		if (configMapItemProvider != null)
			configMapItemProvider.dispose();
		if (secretItemProvider != null)
			secretItemProvider.dispose();
		if (persistentVolumeItemProvider != null)
			persistentVolumeItemProvider.dispose();
		if (loadBalancerItemProvider != null)
			loadBalancerItemProvider.dispose();
		if (cloudPropertiesItemProvider != null)
			cloudPropertiesItemProvider.dispose();
		if (ingressItemProvider != null)
			ingressItemProvider.dispose();
		if (monitoringItemProvider != null)
			monitoringItemProvider.dispose();
		if (clusterItemProvider != null)
			clusterItemProvider.dispose();
		if (orkaModelItemProvider != null)
			orkaModelItemProvider.dispose();
	}

}
